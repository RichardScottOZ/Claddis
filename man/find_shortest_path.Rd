% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/find_shortest_path.r
\name{find_shortest_path}
\alias{find_shortest_path}
\title{Finds the shortest path between two states in a stepmatrix}
\usage{
find_shortest_path(stepmatrix, start, end)
}
\arguments{
\item{stepmatrix}{An object of class \code{stepMatrix}.}

\item{start}{The start state for the requested path.}

\item{end}{The end state of the requested path.}
}
\value{
A vector of states describing a path in order from start to end.
}
\description{
Given a start and end state, returns the shortest path through a stepmatrix.
}
\details{
A common problem in graph theory is identifying the shortest path to take between two vertices of a connected graph. A stepmatrix also describes a graph, with transition costs representing edge weights that can be asymmetric (e.g., going from 0 to 1 can have a different weight than going from 1 to 0). Finding the shortest path between states - i.e., the path that minimises total weiight (cost) - from a stepmatrix has two main applications in Claddis: 1. to check a stepmatrix is internally consistent (no cost is misidentified due to a "cheaper" route being available - solving a problem identified in MADDISON), and 2. to identify the minimum number of steps a character could have on a tree (an essential aspect of various homoplasy metrics, Hoyal Cuthill et al. 2010).

This function implements a slightly modified version of Dijkstra's algorithm (Dijkstra 1959) to deal with the special case of a cladistic-style stepmatrix. The core code is taken from \link[https://www.r-bloggers.com/2020/10/finding-the-shortest-path-with-dijkstras-algorithm/]{this} R-bloggers post.
}
\examples{

# Make a four-state Dollo stepmatrix:
stepmatrix <- Claddis::make_stepmatrix(
  min_state = 0,
  max_state = 3,
  character_type = "dollo",
  include_polymorphisms = FALSE,
  polymorphism_shape = "hypersphere",
  polymorphism_distance = "great_circle",
  dollo_penalty = 100
)

# Find the shortest path from state 0 to state 3:
find_shortest_path(
  stepmatrix = stepmatrix,
  start = "0",
  end = "3"
)

# Show that this is directional by asking for the reverse path:
find_shortest_path(
  stepmatrix = stepmatrix,
  start = "3",
  end = "0"
)

}
\references{
Dijkstra, E. W., 1959. A note on two problems in connexion with graphs. \emph{Numerische Mathematik}, \bold{1}, 269â€“271.

Hoyal Cuthill, J. F., Braddy, S. J. and Donoghue, P. C. J., 2010. A formula for maximum possible steps in multistate characters: isolating matrix parameter effects on measures of evolutionary convergence. \emph{Cladistics}, \bold{26}, 98-102.
}
\seealso{
\link{make_all_polymorphisms}
}
\author{
Graeme T. Lloyd \email{graemetlloyd@gmail.com}
}
