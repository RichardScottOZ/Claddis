% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fix_stepmatrix.R
\name{fix_stepmatrix}
\alias{fix_stepmatrix}
\title{Fixes a stepmatrix that has inconsistent costs}
\usage{
fix_stepmatrix(stepmatrix, message = TRUE)
}
\arguments{
\item{stepmatrix}{A stepMatrix object.}

\item{message}{A logical indicating whether messages should be output (defaults to \code{TRUE}).}
}
\value{
A stepMatrix object with self-consistent transition costs.
}
\description{
Given a stepmatrix where transition costs are not self-consistent finds and returns a stepmatrix that does.
}
\details{
A user may wish to consider a complicated set of transition costs between states when modelling discrete character evolution. This can be achieved with a custom stepmatrix in Claddis (and elsewhere). However, some caution is urged when using such matrices to ensure that these costs are \emph{self-consistent}. More specifically, no direct state-to-state transition cost (excluding infinite costs) should be greater than is possible with an indirect path via one or more intermediate states.

This problem was first recognised (to the best of my knowledge) by Maddison and Maddison (2003), although they offered no direct solution.

This function offers a solution through an algorithm that will iteratively alter a stepmatrix until all direct transition costs are self-consistent. It does so by finding the shortest state-to-state path for all possible transitions using the \link{find_shortest_stepmatrix_path} function. Because the first solution may itself be inconsistent (as it relied on costs that have since updated) the algorithm is repeated until an equilbirum is reached. (This scenario is unlikely in most real world cases, but may be possible with very large matrices representing many states so was implemented for safety.)

Note: that TNT (Goloboff et al. 2008; Goloboff and Catalano, 2016) offers a correction based on the triangle inequality which appears to be an attempt to solve the same problem.

Note: other issues with a stepmatrix may arise that are better revealed by using the \link{check_stepMatrix} function which has informative error messages for how to fix any errors in format.
}
\examples{

# Build a custom stepmatrix with non-self consistent path lengths:
stepmatrix <- make_stepmatrix(
  min_state = 0,
  max_state = 2,
  character_type = "irreversible",
  polymorphism_shape = "simplex",
  polymorphism_distance = "euclidean"
)
stepmatrix$stepmatrix[1:9] <- c(0, 2, 4, 1, 0, 3, 5, 3, 0)
stepmatrix$symmetry <- "Asymmetric"
stepmatrix$type <- "custom"
stepmatrix

# Fix stepmatrix:
fixed_stepmatrix <- fix_stepmatrix(stepmatrix = stepmatrix)

# Compare transition costs:
stepmatrix$stepmatrix
fixed_stepmatrix$stepmatrix
}
\references{
Goloboff, P. A. and Catalano, S. A., 2016. TNT version 1.5, including a full implementation of phylogenetic morphometrics. \emph{Cladistics}, \bold{32}, 221-238.

Goloboff, P., Farris, J. and Nixon, K., 2008. TNT, a free program for phylogenetic analysis. \emph{Cladistics}, \bold{24}, 774-786.

Maddison, D. R. and Maddison, W. P., 2003. \emph{MacClade 4: Analysis of phylogeny and character evolution}. Version 4.06. Sinauer Associates, Sunderland, Massachusetts.
}
\author{
Graeme T. Lloyd \email{graemetlloyd@gmail.com}
}
