% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/convert_stepmatrix_to_graph.r
\name{convert_stepmatrix_to_graph}
\alias{convert_stepmatrix_to_graph}
\title{Convert a stepmatrix to a minimal graph}
\usage{
convert_stepmatrix_to_graph(stepmatrix)
}
\arguments{
\item{stepmatrix}{An object of class \code{stepMatrix}.}
}
\value{
A matrix representing the minimum graph as directed edges (from, to, and edge weight). For an undirected graph both ways an edge can be defined are included.
}
\description{
Given a stepmatrix, returns the smallest possible graph (fewest edges).
}
\details{
A stepmatrix summarises all possible state-to-state transition costs and hence each entry could also be considered an edge of a directed state graph. However, many of these edges could be removed and a complete description of the graph still be provided. For example, the diagonal (any transition from a state to itself) can be removed, as can any edge with infinite cost (as this edge would never be traversed in practice). Finally, some edges are redundant as indirect paths already represent the same cost.

As an example, we can consider the linear ordered stepmatrix:

\preformatted{    -------------
    | 0 | 1 | 2 |
-----------------
| 0 | 0 | 1 | 2 |
-----------------
| 1 | 1 | 0 | 1 |
-----------------
| 2 | 2 | 1 | 0 |
-----------------}

A maximum directed graph representation would thus be:

\preformatted{----------------------
| from | to | weight |
----------------------
|   0  | 0  |   0    |
----------------------
|   0  | 1  |   1    |
----------------------
|   0  | 2  |   2    |
----------------------
|   1  | 0  |   1    |
----------------------
|   1  | 1  |   0    |
----------------------
|   1  | 2  |   1    |
----------------------
|   2  | 0  |   2    |
----------------------
|   2  | 1  |   1    |
----------------------
|   2  | 2  |   0    |
----------------------}

But the following description is still complete, and minimal:

\preformatted{----------------------
| from | to | weight |
----------------------
|   0  | 1  |   1    |
----------------------
|   1  | 0  |   1    |
----------------------
|   1  | 2  |   1    |
----------------------
|   2  | 1  |   1    |
----------------------}

This function effectively generates the latter (the minimal directed graph representation as a matrix of edges).
}
\examples{

# Make a six-state unordered character stepmatrix:
unordered_stepmatrix <- make_stepmatrix(
  min_state = 0,
  max_state= 5,
  character_type = "unordered",
  polymorphism_shape = "simplex",
  polymorphism_distance = "euclidean"
)

# Find the minimal directed graph representation:
convert_stepmatrix_to_graph(stepmatrix = unordered_stepmatrix)

# Make a six-state ordered character stepmatrix:
ordered_stepmatrix <- make_stepmatrix(
  min_state = 0,
  max_state= 5,
  character_type = "ordered",
  polymorphism_shape = "simplex",
  polymorphism_distance = "euclidean"
)

# Find the minimal directed graph representation:
convert_stepmatrix_to_graph(stepmatrix = ordered_stepmatrix)

# Make a six-state stratigraphic character stepmatrix:
stratigraphic_stepmatrix <- make_stepmatrix(
  min_state = 0,
  max_state= 5,
  character_type = "stratigraphy",
  polymorphism_shape = "simplex",
  polymorphism_distance = "euclidean",
  state_ages = c(103, 91.4, 78.2, 73.4, 66.0, 59.7)
)

# Find the minimal directed graph representation:
convert_stepmatrix_to_graph(stepmatrix = stratigraphic_stepmatrix)

}
\seealso{
\link{convert_adjacency_matrix_to_stepmatrix}
}
\author{
Graeme T. Lloyd \email{graemetlloyd@gmail.com}
}
