% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/find_shortest_stepmatrix_path.r
\name{find_shortest_stepmatrix_path}
\alias{find_shortest_stepmatrix_path}
\title{Finds the shortest path between two states in a stepmatrix}
\usage{
find_shortest_stepmatrix_path(stepmatrix, start, end)
}
\arguments{
\item{stepmatrix}{An object of class \code{stepMatrix}.}

\item{start}{The start state for the requested path.}

\item{end}{The end state of the requested path.}
}
\value{
A vector of states describing (one) of the optimal path(s) in the order \code{start} to \code{end}.
}
\description{
Given a start and end state, returns the shortest path through a stepmatrix.
}
\details{
A common problem in graph theory is identifying the shortest path to take between two vertices of a connected graph. A stepmatrix also describes a graph, with transition costs representing edge weights that can be asymmetric (e.g., going from 0 to 1 can have a different weight than going from 1 to 0). Finding the shortest path between states - i.e., the path that minimises total weight (cost) - from a stepmatrix has two main applications in Claddis: 1. to check a stepmatrix is internally consistent (no cost is misidentified due to a "cheaper" route being available - solving a problem identified in Maddison and Maddison 2003), and 2. to identify the minimum number of steps a character could have on a tree (an essential aspect of various homoplasy metrics, see Hoyal Cuthill et al. 2010).

The function returns a vector describing (one) shortest (i.e., lowest cost) path between \code{start} and \code{end}. If the direct path is shortest this will be simply \code{start} and \code{end}, but if an indirect route is cheaper then other node(s) will appear between these values.

In operation the function is inspired by Dijkstra's algorithm (Dijkstra 1959) but differs in some aspects to deal with the special case of a cladistic-style stepmatrix. Essentially multiple paths are considered with the algorithm continuing until either the destination node (\code{end}) is reached or the accumulated cost (path length) exceeds the direct cost (meaning the path cannot be more optimal, lower cost, than the direct one).

Note: that because infinite costs are allowed in step matrices to convey that a particular transition is not allowed these are not considered by the function and by default the direct path (\code{start} -> \code{end}) will be returned. (If this is the user's aim they should replaced any \\code{Inf} value with a high number instead.)

Note: negative costs are not allowed in stepmatrices and will confound the algorithm.

Note: if multiple equally optimal solutions are possible, the function will only return one of them. I.e., just because a solution is not presented it cannot be assumed it is suboptimal. For example, for any ordered character (of three or more states) there will always be multiple equally optimal solutions.
}
\examples{

# Make a four-state Dollo stepmatrix:
stepmatrix <- Claddis::make_stepmatrix(
  min_state = 0,
  max_state = 3,
  character_type = "dollo",
  include_polymorphisms = FALSE,
  polymorphism_shape = "hypersphere",
  polymorphism_distance = "great_circle",
  dollo_penalty = 100
)

# Find the shortest path from state 0 to state 3:
find_shortest_stepmatrix_path(
  stepmatrix = stepmatrix,
  start = "0",
  end = "3"
)

# Show that this is directional by asking for the reverse path:
find_shortest_stepmatrix_path(
  stepmatrix = stepmatrix,
  start = "3",
  end = "0"
)

}
\references{
Dijkstra, E. W., 1959. A note on two problems in connexion with graphs. \emph{Numerische Mathematik}, \bold{1}, 269â€“271.

Hoyal Cuthill, J. F., Braddy, S. J. and Donoghue, P. C. J., 2010. A formula for maximum possible steps in multistate characters: isolating matrix parameter effects on measures of evolutionary convergence. \emph{Cladistics}, \bold{26}, 98-102.

Maddison, D. R. and Maddison, W. P., 2003. \emph{MacClade 4: Analysis of phylogeny and character evolution}. Version 4.06. Sinauer Associates, Sunderland, Massachusetts.
}
\seealso{
\link{convert_adjacency_matrix_to_stepmatrix}, \link{make_stepmatrix}
}
\author{
Graeme T. Lloyd \email{graemetlloyd@gmail.com}
}
