% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/convert_stategraph_to_costmatrix.r
\name{convert_stategraph_to_costmatrix}
\alias{convert_stategraph_to_costmatrix}
\title{Convert a minimal state graph to a costmatrix}
\usage{
convert_stategraph_to_costmatrix(state_graph, fix_ratio = FALSE)
}
\arguments{
\item{state_graph}{A matrix describing a state graph with columns indicating from states, to states and weights (costs).}

\item{fix_ratio}{A logical indicating whether (\cost{TRUE}) or not (\code{FALSE}, the default) to fix costs such that the minimum cost is one.}
}
\value{
An object of class \code{costMatrix}.
}
\description{
Given a smallest possible state graph (fewest edges), returns the corresponding costmatrix.
}
\details{
A state graph describes the relationship between character states in terms of a graph of vertices (character states) and edges (weights). Edges can be "symmetric" (the graph is undirected) or "asymmetric" (the graph is directed, a digraph).

For example, a simple symmetric binary state graph might look ike this:

\preformatted{  1
A---B}

Here the two states are A and B and the weight (cost of transitioning from A to B or B to A) is one.

In Claddis this graph can be represented using a data.frame of edges:

\preformatted{from to weight
   0  1      1
   1  0      1}

Each row represents an edge, from one vertex to another, and the corresponding weight (transition cost). Note that for symmetric graphs the edge is stated twice, once for each direction of the transition.

This function converts these state transitions to costmatrices, including interpolating any missing transitions. Here the costmatrix would look quite simple:

\preformatted{    ---------
    | 0 | 1 |
-------------
| 0 | 0 | 1 |
-------------
| 1 | 1 | 0 |
-------------}

The function also offers the option to "fix" the ratio of costs such that the minimum edge weight (minimum direct state-to-state transition) is one. Note: this is unlikely to be something most users will need and so defaults to false.
}
\examples{

# Make state graph for a four-state linear ordered character:
state_graph <- data.frame(
  from = c("0", "1", "2", "3", "2", "1"),
  to = c("1", "2", "3", "2", "1", "0"),
  weight = c(1, 1, 1, 1, 1, 1),
  stringsAsFactors = FALSE
)

# View state graph:
state_graph

# Convert state graph to a costmatrix:
costmatrix <- convert_stategraph_to_costmatrix(state_graph = state_graph)

# Show costmatrix reflects linear ordered costs:
costmatrix$costmatrix

}
\seealso{
\link{convert_adjacency_matrix_to_costmatrix}
\link{convert_costmatrix_to_stategraph}
}
\author{
Graeme T. Lloyd \email{graemetlloyd@gmail.com}
}
